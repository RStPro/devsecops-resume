name: CI/CD with Security Scans

on:
  push:
    branches:
      - main

jobs:
  security:
    name: Run SAST Security Scans
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Bandit (Python security scan)
        run: bandit -r . -x venv

      - name: Run Safety (vulnerable packages scan)
        run: safety check --full-report --ignore=51358

      - name: Run Flake8 (code linting)
        run: flake8 .

  zapscan:  # ✅ No underscore!
    name: Run OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    needs: security

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ secrets.ZAP_SCAN_URL }}
          allow_issue_writing: false
          cmd_options: >
            -J report_json.json
            -w report_md.md
            -r report_html.html
            -z "-config scanner.threadPerHost=3"

      - name: Organize ZAP Reports
        run: |
          mkdir -p zap-output
          mv report_json.json report_md.md report_html.html zap-output/

      - name: Debug ZAP Output
        run: |
          echo "ZAP output directory contents:"
          ls -la zap-output || echo "Directory missing or empty"

      - name: Upload ZAP Scan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zapscan-artifacts  # ✅ Safe artifact name
          path: zap-output/

  deploy:
    name: Deploy to Fly.io
    needs: [security]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
